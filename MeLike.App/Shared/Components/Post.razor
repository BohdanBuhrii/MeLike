@using MeLike.Services.ViewModels
@using MeLike.Services.Interfaces
@using MeLike.Data.Enums

@inject IPostsService postService

<div class="card">
    
    <div class="card-body">
        <h3>@Source.Author</h3>

        <hr />
        <div class="">
            <p>@Source.Text</p>
        </div>
        <hr />
        <div class="">
            <div>
                @Source.Views views, @Source.Emotions.Count likes, @Source.Comments.Count comments
            </div>

        </div>
    </div>
    <div class="card-footer">
        <div>
            <button class="btn btn-link" @onclick=@Like disabled=@likeDisabled>
                <i class="fas fa-thumbs-up"></i>
                Like
            </button>
            <button class="btn btn-link" @onclick="@(e => @commentDisabled=!@commentDisabled)">
                <i class="far fa-comment-alt"></i>
                Comment
            </button>
        </div>
    </div>
    @if (commentDisabled)
    {
        <div class="md-form m-0 p-0">
            <input class="text col-6 ml-5" @bind-value="comment" required/>&nbsp;
            <button class="btn btn-link col-auto" @onclick=postComment>Let them know!</button>
        </div>
    }
</div>
@code {
    private bool likeDisabled { get; set; } = false;
    private bool commentDisabled { get; set; } = false;
    private bool commentListDisabled { get; set; } = false;
    private string comment;

    [Parameter] public PostViewModel Source { get; set; }

    private async Task Like()
    {
        likeDisabled = true;
        await postService.AddEmotion(Source, EmotionType.Like);
        likeDisabled = false;
    }

    private async Task postComment()
    {
        if (string.IsNullOrWhiteSpace(comment)) return;

        commentDisabled = true;
        await postService.AddComment(Source, comment);
        comment = string.Empty;
    }
}
